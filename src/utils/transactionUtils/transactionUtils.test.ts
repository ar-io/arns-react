import { getPriceByBlockHeight } from './transactionUtils';

const prices: Record<string, number> = {
  '1281517': 500000,
  '1281547': 488750,
  '1281577': 477754,
  '1281607': 467004,
  '1281637': 456497,
  '1281667': 446225,
  '1281697': 436185,
  '1281727': 426371,
  '1281757': 416778,
  '1281787': 407400,
  '1281817': 398234,
  '1281847': 389274,
  '1281877': 380515,
  '1281907': 371953,
  '1281937': 363584,
  '1281967': 355404,
  '1281997': 347407,
  '1282027': 339591,
  '1282057': 331950,
  '1282087': 324481,
  '1282117': 317180,
  '1282147': 310044,
  '1282177': 303068,
  '1282207': 296249,
  '1282237': 289583,
  '1282267': 283067,
  '1282297': 276698,
  '1282327': 270473,
  '1282357': 264387,
  '1282387': 258438,
  '1282417': 252624,
  '1282447': 246940,
  '1282477': 241383,
  '1282507': 235952,
  '1282537': 230643,
  '1282567': 225454,
  '1282597': 220381,
  '1282627': 215423,
  '1282657': 210576,
  '1282687': 205838,
  '1282717': 201206,
  '1282747': 196679,
  '1282777': 192254,
  '1282807': 187928,
  '1282837': 183700,
  '1282867': 179567,
  '1282897': 175526,
  '1282927': 171577,
  '1282957': 167717,
  '1282987': 163943,
  '1283017': 160254,
  '1283047': 156649,
  '1283077': 153124,
  '1283107': 149679,
  '1283137': 146311,
  '1283167': 143019,
  '1283197': 139801,
  '1283227': 136656,
  '1283257': 133581,
  '1283287': 130575,
  '1283317': 127637,
  '1283347': 124765,
  '1283377': 121958,
  '1283407': 119214,
  '1283437': 116532,
  '1283467': 113910,
  '1283497': 111347,
  '1283527': 108842,
  '1283557': 106393,
  '1283587': 103999,
  '1283617': 101659,
  '1283647': 99372,
  '1283677': 97136,
  '1283707': 94950,
  '1283737': 92814,
  '1283767': 90726,
  '1283797': 88684,
  '1283827': 86689,
  '1283857': 84738,
  '1283887': 82832,
  '1283917': 80968,
  '1283947': 79146,
  '1283977': 77366,
  '1284007': 75625,
  '1284037': 73923,
  '1284067': 72260,
  '1284097': 70634,
  '1284127': 69045,
  '1284157': 67491,
  '1284187': 65973,
  '1284217': 64489,
  '1284247': 63038,
  '1284277': 61619,
  '1284307': 60233,
  '1284337': 58878,
  '1284367': 57553,
  '1284397': 56258,
  '1284427': 54992,
  '1284457': 53755,
  '1284487': 52545,
  '1284517': 51363,
  '1284547': 50207,
  '1284577': 49078,
  '1284607': 47974,
  '1284637': 46894,
  '1284667': 45839,
  '1284697': 44808,
  '1284727': 43799,
  '1284757': 42814,
  '1284787': 41851,
  '1284817': 40909,
  '1284847': 39989,
  '1284877': 39089,
  '1284907': 38209,
  '1284937': 37350,
  '1284967': 36509,
  '1284997': 35688,
  '1285027': 34885,
  '1285057': 34100,
  '1285087': 33333,
  '1285117': 32583,
  '1285147': 31850,
  '1285177': 31133,
  '1285207': 30433,
  '1285237': 29748,
  '1285267': 29079,
  '1285297': 28424,
  '1285327': 27785,
  '1285357': 27160,
  '1285387': 26549,
  '1285417': 25951,
  '1285447': 25367,
  '1285477': 24797,
  '1285507': 24239,
  '1285537': 23693,
  '1285567': 23160,
  '1285597': 22639,
  '1285627': 22130,
  '1285657': 21632,
  '1285687': 21145,
  '1285717': 20669,
  '1285747': 20204,
  '1285777': 19750,
  '1285807': 19305,
  '1285837': 18871,
  '1285867': 18446,
  '1285897': 18031,
  '1285927': 17626,
  '1285957': 17229,
  '1285987': 16842,
  '1286017': 16463,
  '1286047': 16092,
  '1286077': 15730,
  '1286107': 15376,
  '1286137': 15030,
  '1286167': 14692,
  '1286197': 14362,
  '1286227': 14038,
  '1286257': 13723,
  '1286287': 13414,
  '1286317': 13112,
  '1286347': 12817,
  '1286377': 12529,
  '1286407': 12247,
  '1286437': 11971,
  '1286467': 11702,
  '1286497': 11439,
  '1286527': 11181,
  '1286557': 10930,
};

describe('getPriceByBlockHeight', () => {
  const priceKeys: string[] = Object.keys(prices);

  it.each(priceKeys)(
    'should return correct minimum bid for block height %s',
    (blockHeight) => {
      const result = getPriceByBlockHeight(prices, +blockHeight);
      const result2 = getPriceByBlockHeight(prices, +blockHeight + 2);

      const expected = prices[`${blockHeight}`];
      expect(result).toEqual(expected);
      expect(result2).toEqual(expected);
    },
  );

  it('should return correct minimum bid for the lowest block height', () => {
    const result = getPriceByBlockHeight(prices, +priceKeys[0]);
    expect(result).toEqual(prices[priceKeys[0]]);
  });

  it('should return correct minimum bid for the highest block height', () => {
    const result = getPriceByBlockHeight(
      prices,
      +priceKeys[priceKeys.length - 1],
    );
    expect(result).toEqual(prices[+priceKeys[priceKeys.length - 1]]);
  });

  it('should throw an error for empty prices object', () => {
    expect(() => getPriceByBlockHeight({}, 1285598)).toThrow(
      `No prices found for auction`,
    );
  });
});
