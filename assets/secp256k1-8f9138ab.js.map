{"version":3,"file":"secp256k1-8f9138ab.js","sources":["../../node_modules/viem/node_modules/@noble/curves/esm/abstract/utils.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/hash-to-curve.js","../../node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","import { mod } from './modular.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map"],"names":["_0n$4","_1n$4","_2n$3","isBytes","a","abytes","item","hexes","_","i","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","n2","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","n","len","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","res","e","concatBytes","arrays","sum","pad","equalBytes","b","diff","utf8ToBytes","str","bitLen","bitGet","pos","bitSet","value","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","h","reseed","seed","gen","out","sl","pred","validatorFns","val","object","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","_0n$3","_1n$3","_2n$2","_3n$1","_4n$1","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","number","u","q","r","m","tonelliShanks","P","legendreC","Q","S","Z","p1div4","Fp","root","Q1div2","g","t2","ge","FpSqrt","c1","nv","FIELD_FIELDS","validateField","field","initial","opts","map","FpPow","f","p","d","FpInvertBatch","nums","tmp","lastMultiplied","acc","inverted","nLength","nBitLength","_nBitLength","nByteLength","Field","ORDER","isLE","redef","BITS","BYTES","sqrtP","lhs","rhs","lst","c","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","length","mapHashToField","key","fieldLen","minLen","reduced","_0n$2","_1n$2","wNAF","bits","constTimeNegate","condition","neg","W","windows","windowSize","elm","points","base","window","precomputes","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","cond1","cond2","precomputesMap","transform","comp","validateBasic","curve","validatePointOpts","endo","b2n","h2b","ut","DER","E","l","sBytes","s","rBytesLeft","sig","slice","shl","rhl","rl","_0n$1","_1n$1","_2n$1","_3n","_4n","weierstrassPoints","CURVE","toBytes","_c","point","_isCompressed","fromBytes","tail","y","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","wrapPrivateKey","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","is0","toInv","privateKey","left","right","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","wnaf","I","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","G","mul","iz","z","ax","ay","zz","cofactor","isTorsionFree","clearCofactor","isCompressed","_bits","validateOpts","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","modN","invN","cat","head","y2","sqrtError","suffix","isYOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","from","to","Signature","recovery","msgHash","rec","bits2int_modN","radj","prefix","R","ir","u1","u2","utils","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","bits2int","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","hash","randomBytes","lowS","prehash","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","C","verify","signature","publicKey","sg","_sig","derError","error","is","_a","SWUFpSqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","sqrtRatio","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","mapToCurveSimpleSWU","tv6","isValid","os2ip","i2osp","strxor","anum","expand_message_xmd","msg","DST","lenInBytes","H","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xof","dkLen","hash_to_field","count","options","expand","_DST","log2p","L","len_in_bytes","prb","j","elm_offset","tv","isogenyMap","COEFF","xNum","xDen","yNum","yDen","createHasher","mapToCurve","def","u0","getHash","msgs","hmac","concatBytes$1","createCurve","defHash","create","secp256k1P","secp256k1N","_1n","_2n","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","b1","a2","POW_2_128","sha256","_0n","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","message","auxRand","t","rand","k_","rx","schnorrVerify","pub","schnorr","isoMap","mapSWU","htf","scalars","hashToCurve","encodeToCurve"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}