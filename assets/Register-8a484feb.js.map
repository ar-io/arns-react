{"version":3,"file":"Register-8a484feb.js","sources":["../../src/hooks/useIsFocused/useIsFocused.tsx","../../src/components/inputs/text/NameTokenSelector/NameTokenSelector.tsx","../../src/components/pages/Register/Register.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport function useIsFocused(id: string) {\n  // helpful when you need to modify the style of a separate element when another element is focused\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    const element = document.getElementById(id);\n\n    if (!element) {\n      console.error(`No element found with id: ${id}`);\n      return;\n    }\n\n    const onFocus = () => setIsFocused(true);\n    const onBlur = () => setIsFocused(false);\n\n    element.addEventListener('focus', onFocus);\n    element.addEventListener('blur', onBlur);\n\n    return () => {\n      element.removeEventListener('focus', onFocus);\n      element.removeEventListener('blur', onBlur);\n    };\n  }, [id]);\n\n  return isFocused;\n}\n","import { ANT, AOProcess, AoArNSNameData } from '@ar.io/sdk/web';\nimport Tooltip from '@src/components/Tooltips/Tooltip';\nimport { Pagination, PaginationProps } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsFocused } from '../../../../hooks';\nimport { ArweaveTransactionID } from '../../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../../state/contexts/WalletState';\nimport { AoAddress, VALIDATION_INPUT_TYPES } from '../../../../types';\nimport { isArweaveTransactionID } from '../../../../utils';\nimport { ARWEAVE_TX_LENGTH } from '../../../../utils/constants';\nimport eventEmitter from '../../../../utils/events';\nimport { CloseIcon, HamburgerOutlineIcon } from '../../../icons';\nimport { Loader } from '../../../layout';\nimport ValidationInput from '../ValidationInput/ValidationInput';\nimport './styles.css';\n\ntype NameTokenDetails = {\n  [id: string]: {\n    owner: string;\n    controllers: string[];\n    name: string;\n    ticker: string;\n    names: string[];\n  };\n};\n\nfunction NameTokenSelector({\n  selectedTokenCallback,\n}: {\n  selectedTokenCallback: (id: ArweaveTransactionID | undefined) => void;\n}) {\n  const [{ arweaveDataProvider, antAoClient, hyperbeamUrl }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n\n  const [searchText, setSearchText] = useState<string>();\n  const [tokens, setTokens] = useState<NameTokenDetails>();\n  const [loading, setLoading] = useState(false);\n  const [filteredTokens, setFilteredTokens] =\n    useState<\n      Array<\n        | { id: string; name?: string; ticker?: string; names?: string[] }\n        | undefined\n      >\n    >();\n  const [selectedToken, setSelectedToken] = useState<\n    { id: string; name: string; ticker: string; names: string[] } | undefined\n  >(undefined);\n  const [searching, setSearching] = useState<boolean>(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [validImport, setValidImport] = useState<boolean | undefined>(\n    undefined,\n  );\n  const isFocused = useIsFocused('name-token-input');\n\n  const listRef = useRef<HTMLDivElement>(null);\n  const [listPage, setListPage] = useState<number>(1);\n  const listItemCount = 3;\n\n  useEffect(() => {\n    selectedTokenCallback(\n      selectedToken ? new ArweaveTransactionID(selectedToken.id) : undefined,\n    );\n    setListPage(1);\n  }, [selectedToken]);\n\n  // FIXME: disabled to avoid too many requests\n  // useEffect(() => {\n  //   if (!walletAddress) {\n  //     return;\n  //   }\n  //   getTokenList(walletAddress);\n  // }, [walletAddress]);\n\n  useEffect(() => {\n    if (!listRef.current) {\n      return;\n    }\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [listRef]);\n\n  function handleClickOutside(e: any) {\n    if (\n      listRef.current &&\n      e.target !== listRef.current &&\n      !listRef.current.contains(e.target)\n    ) {\n      setSearchText('');\n      setSearchActive(false);\n      setFilteredTokens(undefined);\n      setListPage(1);\n    }\n  }\n\n  async function getTokenList(\n    address: AoAddress | undefined,\n    imports: ArweaveTransactionID[] = [],\n  ) {\n    try {\n      setLoading(true);\n      if (!address) {\n        throw new Error('No address provided');\n      }\n\n      const fetchedprocessIds: Array<ArweaveTransactionID> = [];\n\n      const validImports = imports.length\n        ? await Promise.all(\n            imports.map(async (id: ArweaveTransactionID) => {\n              try {\n                const contract = ANT.init({\n                  hyperbeamUrl,\n                  process: new AOProcess({\n                    processId: id.toString(),\n                    ao: antAoClient,\n                  }),\n                });\n\n                const info = await contract.getInfo();\n\n                // TODO: further validate that contract exists and has valid state\n\n                if (!contract || !info) {\n                  throw new Error('Unable to get contract');\n                }\n\n                setValidImport(true);\n                return id;\n              } catch (error) {\n                eventEmitter.emit('error', error);\n              }\n            }),\n          ).then(\n            (ids: Array<ArweaveTransactionID | undefined>) =>\n              ids.filter((id) => !!id) as ArweaveTransactionID[],\n          )\n        : [];\n\n      if (!fetchedprocessIds.length && !validImports.length) {\n        return;\n      }\n\n      const processIds = fetchedprocessIds.concat(validImports);\n      const associatedRecords = await arweaveDataProvider.getRecords({\n        filters: {\n          processId: processIds,\n        },\n      });\n\n      const contracts: {\n        processId: ArweaveTransactionID;\n        names: Record<string, AoArNSNameData>;\n        owner: string;\n        controllers: string[];\n        ticker: string;\n        name: string;\n      }[] = await Promise.all(\n        processIds.map(async (processId) => {\n          const contract = ANT.init({\n            hyperbeamUrl,\n            process: new AOProcess({\n              processId: processId.toString(),\n              ao: antAoClient,\n            }),\n          });\n          const names = Object.keys(associatedRecords).reduce(\n            (acc: Record<string, AoArNSNameData>, id: string) => {\n              if (associatedRecords[id].processId === processId.toString()) {\n                acc[id] = associatedRecords[id];\n              }\n              return acc;\n            },\n            {},\n          );\n\n          const [owner, controllers, ticker, name] = await Promise.all([\n            contract.getOwner(),\n            contract.getControllers(),\n            contract.getTicker(),\n            contract.getName(),\n          ]).catch(() => {\n            throw new Error('Unable to get contract details');\n          });\n          return {\n            processId,\n            names,\n            owner,\n            controllers,\n            ticker,\n            name,\n          };\n        }),\n      ).then((contracts) => contracts.filter((contract) => !!contract));\n\n      if (!contracts.length) {\n        throw new Error('Unable to get details for Name Tokens');\n      }\n\n      const newTokens: NameTokenDetails = contracts.reduce(\n        async (result, contract) => {\n          const { processId, owner, controllers, name, ticker, names } =\n            contract;\n\n          return {\n            ...result,\n            [processId.toString()]: {\n              owner,\n              controllers,\n              name,\n              ticker,\n              names: Object.keys(names),\n            },\n          };\n        },\n        {},\n      );\n\n      // HACK: we have nested all Promise.all so await twice to resolve\n      setTokens(await newTokens);\n      if (validImports.length) {\n        const details = newTokens[validImports[0].toString()];\n        setSelectedToken({\n          name: details?.name,\n          ticker: details?.ticker,\n          id: validImports[0].toString(),\n          names: details?.names ?? [],\n        });\n      }\n    } catch (error: any) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setLoading(false);\n      setListPage(1);\n    }\n  }\n\n  function handleTokenSearch(query: string) {\n    try {\n      setSearching(true);\n      setValidImport(undefined);\n      if (!query) {\n        setSearchText('');\n        return;\n      }\n      setSearchText(query);\n\n      if (!tokens) {\n        throw new Error('No Name Tokens Found');\n      }\n      const filteredResults = Object.keys(tokens)\n        .filter((id) => {\n          const { owner, controllers, name, ticker } = tokens[id];\n          const queryResult = [owner, controllers, name, ticker, id].some(\n            (term) =>\n              term &&\n              term.toString().toLowerCase().includes(query.toLowerCase()),\n          );\n          return queryResult;\n        })\n        .map((id) => {\n          const { name, ticker, names } = tokens[id];\n          return { id, name: name ?? '', ticker: ticker ?? '', names };\n        })\n        .filter((n) => !!n);\n      if (!filteredResults.length) {\n        throw new Error('No ANT tokens found for that search');\n      }\n\n      setFilteredTokens(filteredResults);\n    } catch (error) {\n      setFilteredTokens(undefined);\n    } finally {\n      setSearching(false);\n      setListPage(1);\n    }\n  }\n\n  function handleSetToken({\n    id,\n    name,\n    ticker,\n    names,\n  }: {\n    id?: string;\n    name?: string;\n    ticker?: string;\n    names: string[];\n  }) {\n    try {\n      setSearchText('');\n      setFilteredTokens(undefined);\n\n      if (id === undefined) {\n        throw new Error(`No ID provided for ${name ?? ticker ?? ''}`);\n      }\n      setSelectedToken({ id, name: name ?? '', ticker: ticker ?? '', names });\n      selectedTokenCallback(new ArweaveTransactionID(id));\n      setListPage(1);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setSearchActive(false);\n    }\n  }\n\n  const customPreviousAndNextButtons: PaginationProps['itemRender'] = (\n    page,\n    type,\n    originalElement,\n  ) => {\n    if (!tokens) {\n      return;\n    }\n    if (type === 'next' || type === 'prev') {\n      return;\n    }\n    if (type === 'page') {\n      return (\n        <span\n          className=\"flex flex-row hover center\"\n          style={{\n            color: listPage == page ? 'white' : 'var(--text-grey)',\n            width: '32px',\n          }}\n        >\n          {page}\n        </span>\n      );\n    }\n    return originalElement;\n  };\n\n  function updatePage(page: number) {\n    setListPage(page);\n  }\n\n  return (\n    <div\n      ref={listRef}\n      className=\"flex flex-column radius\"\n      style={{\n        position: 'relative',\n        height: 'fit-content',\n        maxHeight: '400px',\n        border:\n          isFocused || searchActive\n            ? `1px solid var(--text-white)`\n            : `1px solid var(--text-faded)`,\n        gap: 0,\n        boxSizing: 'border-box',\n      }}\n    >\n      {/* input wrapper */}\n      <div\n        className=\"name-token-input-wrapper\"\n        style={{ borderBottom: '1px solid var(--text-faded)' }}\n      >\n        <ValidationInput\n          inputId=\"name-token-input\"\n          onClick={() => setSearchActive(true)}\n          showValidationIcon={true}\n          setValue={(v) => handleTokenSearch(v)}\n          value={searchText ?? ''}\n          maxCharLength={ARWEAVE_TX_LENGTH}\n          placeholder={\n            selectedToken\n              ? selectedToken.name?.length\n                ? selectedToken.name\n                : selectedToken.id\n              : 'Add an Arweave Name Token (ANT)'\n          }\n          validationPredicates={{\n            [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n              fn: (id: string) => {\n                return arweaveDataProvider.validateArweaveId(id);\n              },\n            },\n          }}\n          validityCallback={(validity) => validity}\n          wrapperCustomStyle={{\n            width: '100%',\n            hieght: '45px',\n            borderRadius: '0px',\n            backgroundColor: 'var(--card-bg)',\n            boxSizing: 'border-box',\n            paddingLeft: '10px',\n          }}\n          inputClassName={`white ${\n            selectedToken ? 'name-token-input-selected' : 'name-token-input'\n          }`}\n        />\n        <span\n          className={`flex flex-row text grey flex-center ${\n            selectedToken ? 'bold' : ''\n          } hover`}\n          style={{\n            width: 'fit-content',\n            height: 'fit-content',\n            wordBreak: 'keep-all',\n          }}\n        >\n          {loading || searching ? (\n            <Loader size={20} color=\"var(--text-white)\" />\n          ) : searchText && validImport === false ? (\n            <></>\n          ) : searchText &&\n            isArweaveTransactionID(searchText) &&\n            !Object.keys(tokens ?? []).includes(searchText) ? (\n            <button\n              className=\"outline-button flex flex-row center pointer\"\n              style={{\n                borderRadius: '50px',\n                width: 'fit-content',\n                padding: '3px 6px',\n                fontSize: '12px',\n                minWidth: 'fit-content',\n                border: '1px solid var(--text-grey)',\n              }}\n              onClick={() => {\n                getTokenList(walletAddress, [\n                  new ArweaveTransactionID(searchText),\n                ]);\n              }}\n            >\n              Import\n            </button>\n          ) : selectedToken ? (\n            <button\n              className=\"outline-button flex flex-row center pointer\"\n              style={{\n                gap: '3px',\n                borderRadius: '50px',\n                width: 'fit-content',\n                padding: '3px 7px',\n                fontSize: '12px',\n                minWidth: 'fit-content',\n                border: '1px solid var(--text-grey)',\n              }}\n              onClick={() => {\n                setSelectedToken(undefined);\n                selectedTokenCallback(undefined);\n              }}\n            >\n              <CloseIcon width={'13px'} height={'13px'} />\n              Remove\n            </button>\n          ) : (\n            <Tooltip message=\"For advanced use cases only, you can register this name with a custom ANT by entering its Process ID.\" />\n          )}\n        </span>\n      </div>\n      {/* selector dropdown */}\n      {tokens && searchActive ? (\n        <div\n          className=\"flex flex-column\"\n          style={{\n            alignItems: 'flex-start',\n            justifyContent: 'flex-start',\n            gap: 0,\n            height: 'fit-content',\n            width: '100%',\n            backgroundColor: 'var(--card-bg)',\n            boxSizing: 'border-box',\n            zIndex: 10,\n          }}\n        >\n          {searchText && !filteredTokens?.length ? (\n            <span\n              className=\"text-large center\"\n              style={{\n                color: '#444547',\n                margin: 'auto',\n                height: '50px',\n              }}\n            >\n              No Results\n            </span>\n          ) : filteredTokens ? (\n            filteredTokens\n              .slice(\n                Math.max((listPage - 1) * listItemCount, 0),\n                listPage * listItemCount,\n              )\n              .map((token, index) => {\n                if (!token) {\n                  return;\n                }\n\n                return (\n                  <button\n                    key={index}\n                    className=\"name-token-item pointer\"\n                    onClick={() => {\n                      handleSetToken({\n                        id: token.id,\n                        name: token.name ?? '',\n                        ticker: token.ticker ?? '',\n                        names: token.names ?? [],\n                      });\n                    }}\n                  >\n                    {token.name && token.ticker\n                      ? `${token.name.slice(0, 20)} (${token.ticker}) - ${\n                          token.id\n                        }`\n                      : token.id}\n                    {token.names?.length ? (\n                      <Tooltip\n                        key={index}\n                        icon={\n                          <HamburgerOutlineIcon\n                            width={20}\n                            height={20}\n                            fill=\"var(--text-grey)\"\n                          />\n                        }\n                        message={\n                          <div\n                            className=\"flex flex-column\"\n                            style={{\n                              padding: '5px',\n                              gap: '5px',\n                              boxSizing: 'border-box',\n                            }}\n                          >\n                            {token.names.map((name) => (\n                              <span key={name}>{name}</span>\n                            ))}\n                          </div>\n                        }\n                      />\n                    ) : (\n                      <></>\n                    )}\n                  </button>\n                );\n              })\n          ) : (\n            Object.entries(tokens)\n              .slice(\n                Math.max((listPage - 1) * listItemCount, 0),\n                listPage * listItemCount,\n              )\n              .map((token, index) => {\n                if (!token) {\n                  return;\n                }\n                const [id, details] = token;\n                const { name, ticker, names } = details;\n\n                return (\n                  <button\n                    key={index}\n                    className=\"name-token-item pointer\"\n                    onClick={() => {\n                      handleSetToken({\n                        id,\n                        name: name ?? '',\n                        ticker: ticker ?? '',\n                        names: names ?? [],\n                      });\n                    }}\n                  >\n                    {name && ticker\n                      ? `${name.slice(0, 20)} ${\n                          name.length > 20 ? '...' : ''\n                        } (${ticker}) - ${id}`\n                      : id}\n                    {names?.length ? (\n                      <Tooltip\n                        icon={\n                          <HamburgerOutlineIcon\n                            width={20}\n                            height={20}\n                            fill=\"var(--text-grey)\"\n                          />\n                        }\n                        message={\n                          <div\n                            className=\"flex flex-column\"\n                            style={{\n                              padding: '5px',\n                              boxSizing: 'border-box',\n                            }}\n                          >\n                            {names.map((name) => (\n                              <span key={name}>{name}</span>\n                            ))}\n                          </div>\n                        }\n                      />\n                    ) : (\n                      <></>\n                    )}\n                  </button>\n                );\n              })\n          )}\n          <div\n            className=\"custom-next-pagination flex flex-column\"\n            style={{\n              padding: '10px 25px',\n              boxSizing: 'border-box',\n              width: '100%',\n              justifyContent: 'flex-start',\n            }}\n          >\n            {tokens.length || filteredTokens?.length || !searchText ? (\n              <Pagination\n                total={\n                  Object.keys(tokens).length && !filteredTokens\n                    ? Object.keys(tokens).length\n                    : filteredTokens\n                    ? filteredTokens.length\n                    : 0\n                }\n                itemRender={customPreviousAndNextButtons}\n                showPrevNextJumpers={true}\n                showSizeChanger={false}\n                showQuickJumper={false}\n                onChange={updatePage}\n                current={listPage}\n                defaultPageSize={listItemCount}\n              />\n            ) : (\n              <></>\n            )}{' '}\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default NameTokenSelector;\n","import { CheckCircleFilled } from '@ant-design/icons';\nimport { ANT, AOProcess, mARIOToken } from '@ar.io/sdk/web';\nimport Tooltip from '@src/components/Tooltips/Tooltip';\nimport { Accordion } from '@src/components/data-display';\nimport { useLatestANTVersion } from '@src/hooks/useANTVersions';\nimport { useArNSIntentPrice } from '@src/hooks/useArNSIntentPrice';\nimport { useCostDetails } from '@src/hooks/useCostDetails';\nimport { ValidationError } from '@src/utils/errors';\nimport emojiRegex from 'emoji-regex';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { useIsFocused, useRegistrationStatus } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useRegistrationState } from '../../../state/contexts/RegistrationState';\nimport { useTransactionState } from '../../../state/contexts/TransactionState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  ARNS_INTERACTION_TYPES,\n  BuyRecordPayload,\n  TRANSACTION_TYPES,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  decodeDomainToASCII,\n  encodeDomainToASCII,\n  formatARIO,\n  formatARIOWithCommas,\n  formatDate,\n  isArweaveTransactionID,\n} from '../../../utils';\nimport {\n  MAX_LEASE_DURATION,\n  MIN_LEASE_DURATION,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport Counter from '../../inputs/Counter/Counter';\nimport WorkflowButtons from '../../inputs/buttons/WorkflowButtons/WorkflowButtons';\nimport NameTokenSelector from '../../inputs/text/NameTokenSelector/NameTokenSelector';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport Loader from '../../layout/Loader/Loader';\nimport { StepProgressBar } from '../../layout/progress';\nimport PageLoader from '../../layout/progress/PageLoader/PageLoader';\nimport './styles.css';\n\nfunction RegisterNameForm() {\n  const [\n    {\n      arweaveDataProvider,\n      arioTicker,\n      arioProcessId,\n      antAoClient,\n      antRegistryProcessId,\n      hyperbeamUrl,\n    },\n  ] = useGlobalState();\n  const [\n    { domain, leaseDuration, registrationType, antID, targetId },\n    dispatchRegisterState,\n  ] = useRegistrationState();\n  const { data: costDetails } = useCostDetails({\n    intent: 'Buy-Name',\n    name: domain,\n    type: registrationType,\n    years: leaseDuration,\n  });\n  const { data: fiatPrice } = useArNSIntentPrice({\n    intent: 'Buy-Name',\n    name: domain,\n    type: registrationType,\n    years: leaseDuration,\n  });\n  const formatedPriceString = useMemo(() => {\n    if (!fiatPrice || !costDetails) return 'Calculating prices...';\n    return `Cost: $${formatARIOWithCommas(\n      fiatPrice.fiatEstimate.paymentAmount / 100,\n    )} USD ( ${formatARIO(\n      new mARIOToken(costDetails.tokenCost).toARIO().valueOf(),\n    )} ${arioTicker} )`;\n  }, [fiatPrice, costDetails]);\n\n  const [{ walletAddress }] = useWalletState();\n  const [, dispatchTransactionState] = useTransactionState();\n  const { name } = useParams();\n  const { isLoading: isValidatingRegistration } = useRegistrationStatus(\n    name ?? domain,\n  );\n  const [newTargetId, setNewTargetId] = useState<string>();\n  const targetIdFocused = useIsFocused('target-id-input');\n  const navigate = useNavigate();\n  const [hasValidationErrors, setHasValidationErrors] =\n    useState<boolean>(false);\n  const [validatingNext, setValidatingNext] = useState<boolean>(false);\n  const {\n    data: antVersion,\n    isRefetching: isRefetchingAntVersion,\n    isLoading: isLoadingAntVersion,\n    refetch: refetchAntVersion,\n  } = useLatestANTVersion();\n  const antModuleId = useMemo(() => antVersion?.moduleId, [antVersion]);\n\n  useEffect(() => {\n    if (name && domain !== name) {\n      dispatchRegisterState({\n        type: 'setDomainName',\n        payload: name,\n      });\n    }\n  }, [name, domain]);\n\n  async function handleANTId(id?: ArweaveTransactionID) {\n    if (!id) {\n      dispatchRegisterState({\n        type: 'setANTID',\n        payload: undefined,\n      });\n      return;\n    }\n    dispatchRegisterState({\n      type: 'setANTID',\n      payload: id,\n    });\n\n    const contract = ANT.init({\n      hyperbeamUrl,\n      process: new AOProcess({\n        processId: id.toString(),\n        ao: antAoClient,\n      }),\n    });\n    if (!contract) throw new Error('Contract not found');\n  }\n\n  if (!registrationType) {\n    return <Loader size={80} />;\n  }\n\n  async function handleNext() {\n    try {\n      // validate transaction cost, return if insufficient balance and emit validation message\n      if (!walletAddress) {\n        navigate('/connect', {\n          state: {\n            to: `/register/${domain}`,\n            from: `/register/${domain}`,\n          },\n        });\n        return;\n      }\n\n      if (!antModuleId) {\n        await refetchAntVersion();\n        if (!antModuleId) {\n          throw new Error('No ANT Module available, try again later');\n        }\n      }\n\n      setValidatingNext(true);\n\n      if (hasValidationErrors) {\n        throw new ValidationError(\n          'Please fix the errors above before continuing.',\n        );\n      }\n    } catch (error: any) {\n      eventEmitter.emit('error', error);\n      setValidatingNext(false);\n      return;\n    } finally {\n      setValidatingNext(false);\n    }\n\n    const name =\n      domain && emojiRegex().test(domain)\n        ? encodeDomainToASCII(domain)\n        : domain;\n    const buyRecordPayload: BuyRecordPayload = {\n      name,\n      processId: antID?.toString(),\n      // TODO: move this to a helper function\n      years:\n        registrationType === TRANSACTION_TYPES.LEASE\n          ? leaseDuration\n          : undefined,\n      type: registrationType,\n      targetId,\n      antModuleId,\n      antRegistryId: antRegistryProcessId,\n    };\n\n    dispatchTransactionState({\n      type: 'setTransactionData',\n      payload: {\n        assetId: arioProcessId,\n        functionName: 'buyRecord',\n        ...buyRecordPayload,\n        interactionPrice: costDetails?.tokenCost,\n      },\n    });\n    dispatchTransactionState({\n      type: 'setInteractionType',\n      payload: ARNS_INTERACTION_TYPES.BUY_RECORD,\n    });\n    dispatchTransactionState({\n      type: 'setWorkflowName',\n      payload: ARNS_INTERACTION_TYPES.BUY_RECORD,\n    });\n    // navigate to the transaction page, which will load the updated state of the transaction context\n    navigate(`/checkout`, {\n      state: `/register/${domain}`,\n    });\n  }\n\n  return (\n    <div className=\"page\">\n      <PageLoader\n        message={'Loading Domain info, please wait.'}\n        loading={\n          isValidatingRegistration ||\n          isRefetchingAntVersion ||\n          isLoadingAntVersion\n        }\n      />\n      <div\n        className=\"flex flex-column flex-center\"\n        style={{\n          maxWidth: '900px',\n          width: '100%',\n          padding: '0px',\n\n          gap: '50px',\n          boxSizing: 'border-box',\n        }}\n      >\n        <div\n          className=\"flex flex-row flex-center\"\n          style={{\n            paddingBottom: '20px',\n            borderBottom: 'solid 1px var(--text-faded)',\n          }}\n        >\n          <StepProgressBar\n            stages={[\n              { title: 'Choose', description: 'Pick a name', status: 'finish' },\n              {\n                title: 'Configure',\n                description: 'Registration Period',\n                status: 'process',\n              },\n              {\n                title: 'Confirm',\n                description: 'Review transaction',\n                status: 'wait',\n              },\n            ]}\n            stage={1}\n          />\n        </div>\n\n        <span\n          className=\"text-medium white center\"\n          style={{ fontWeight: '500px', fontSize: '23px', gap: '15px' }}\n        >\n          <span style={{ color: 'var(--success-green)' }}>\n            {decodeDomainToASCII(domain)}{' '}\n            <span className={'white'}>is available!</span>\n          </span>{' '}\n          <CheckCircleFilled\n            style={{ fontSize: '20px', color: 'var(--success-green)' }}\n          />\n        </span>\n        <div className=\"flex flex-column flex-center\">\n          <div\n            className=\"flex flex-column flex-center\"\n            style={{\n              width: '100%',\n              height: 'fit-content',\n              gap: '15px',\n            }}\n          >\n            <div\n              className=\"flex flex-row flex-space-between\"\n              style={{ gap: '25px' }}\n            >\n              <button\n                className=\"flex flex-row center text-medium bold pointer\"\n                onClick={() =>\n                  dispatchRegisterState({\n                    type: 'setRegistrationType',\n                    payload: TRANSACTION_TYPES.LEASE,\n                  })\n                }\n                style={{\n                  position: 'relative',\n                  background:\n                    registrationType === TRANSACTION_TYPES.LEASE\n                      ? 'var(--text-white)'\n                      : '',\n                  color:\n                    registrationType === TRANSACTION_TYPES.LEASE\n                      ? 'var(--text-black)'\n                      : 'var(--text-white)',\n                  border: 'solid 2px var(--text-faded)',\n                  borderRadius: 'var(--corner-radius)',\n                  height: '56px',\n                  borderBottomWidth: '0.5px',\n                }}\n              >\n                Lease{' '}\n                {registrationType === TRANSACTION_TYPES.LEASE ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      bottom: '-6px',\n                      left: '50%',\n                      transform: 'rotate(45deg)',\n                      width: '11px',\n                      height: '11px',\n                      background: 'var(--text-white)',\n                    }}\n                  ></div>\n                ) : (\n                  <></>\n                )}\n              </button>\n              <button\n                className=\"flex flex-row center text-medium bold pointer\"\n                style={{\n                  position: 'relative',\n                  background:\n                    registrationType === TRANSACTION_TYPES.BUY\n                      ? 'var(--text-white)'\n                      : '',\n                  color:\n                    registrationType === TRANSACTION_TYPES.BUY\n                      ? 'var(--text-black)'\n                      : 'var(--text-white)',\n                  border: 'solid 2px var(--text-faded)',\n                  borderRadius: 'var(--corner-radius)',\n                  height: '56px',\n                  borderBottomWidth: '0.5px',\n                }}\n                onClick={() =>\n                  dispatchRegisterState({\n                    type: 'setRegistrationType',\n                    payload: TRANSACTION_TYPES.BUY,\n                  })\n                }\n              >\n                Buy{' '}\n                {registrationType === TRANSACTION_TYPES.BUY ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      bottom: -6,\n                      left: '50%',\n                      transform: 'rotate(45deg)',\n                      width: '11px',\n                      height: '11px',\n                      background: 'var(--text-white)',\n                    }}\n                  ></div>\n                ) : (\n                  <></>\n                )}\n              </button>\n            </div>\n\n            <div\n              className=\"flex flex-column flex-center card\"\n              style={{\n                width: '100%',\n                minHeight: '0px',\n                height: 'fit-content',\n                maxWidth: 'unset',\n                padding: '25px',\n                boxSizing: 'border-box',\n                borderTopWidth: '0.2px',\n                borderRadius: 'var(--corner-radius)',\n                justifyContent: 'flex-start',\n              }}\n            >\n              {registrationType === TRANSACTION_TYPES.LEASE ? (\n                <Counter\n                  value={leaseDuration}\n                  setValue={(v: number) => {\n                    dispatchRegisterState({\n                      type: 'setLeaseDuration',\n                      payload: v,\n                    });\n                  }}\n                  // TODO: move this to a helper function\n                  minValue={MIN_LEASE_DURATION}\n                  maxValue={MAX_LEASE_DURATION}\n                  valueStyle={{ padding: '20px 120px' }}\n                  valueName={leaseDuration > 1 ? 'years' : 'year'}\n                  detail={`Until ${formatDate(\n                    Date.now() + leaseDuration * 365 * 24 * 60 * 60 * 1000,\n                  )}`}\n                  title={\n                    <span\n                      className=\"white\"\n                      style={{\n                        padding: '0px 10px 10px 10px',\n                        fontWeight: '500',\n                      }}\n                    >{`Registration period (between ${MIN_LEASE_DURATION}-${MAX_LEASE_DURATION} years)`}</span>\n                  }\n                />\n              ) : registrationType === TRANSACTION_TYPES.BUY ? (\n                <div\n                  className=\"flex flex-column flex-center\"\n                  style={{ gap: '1em' }}\n                >\n                  <span className=\"text-medium grey center\">\n                    Registration Period\n                  </span>\n                  <span className=\"text-medium white center\">Permanent</span>\n                </div>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-column\" style={{ gap: '1em' }}>\n            <Accordion\n              title={<span className=\"text-medium\">Advanced Options</span>}\n              key=\"1\"\n            >\n              <div className=\"flex flex-column\" style={{ gap: '1em' }}>\n                <div\n                  className=\"name-token-input-wrapper\"\n                  style={{\n                    border:\n                      targetIdFocused || newTargetId\n                        ? 'solid 1px var(--text-white)'\n                        : 'solid 1px var(--text-faded)',\n                    position: 'relative',\n                  }}\n                >\n                  <ValidationInput\n                    inputId={'target-id-input'}\n                    value={newTargetId ?? ''}\n                    setValue={(v: string) => {\n                      setNewTargetId(v.trim());\n                      if (isArweaveTransactionID(v.trim())) {\n                        dispatchRegisterState({\n                          type: 'setTargetId',\n                          payload: new ArweaveTransactionID(v.trim()),\n                        });\n                      }\n                      if (v.trim().length === 0) {\n                        setHasValidationErrors(false);\n                      }\n                    }}\n                    wrapperCustomStyle={{\n                      width: '100%',\n                      hieght: '45px',\n                      borderRadius: '0px',\n                      backgroundColor: 'var(--card-bg)',\n                      boxSizing: 'border-box',\n                    }}\n                    inputClassName={`white name-token-input`}\n                    inputCustomStyle={{\n                      paddingLeft: '10px',\n                      background: 'transparent',\n                    }}\n                    maxCharLength={43}\n                    placeholder={'Arweave Transaction ID (Target ID)'}\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                        fn: (id: string) =>\n                          arweaveDataProvider.validateArweaveId(id),\n                      },\n                    }}\n                    showValidationChecklist={false}\n                    showValidationIcon={true}\n                    validityCallback={(validity: boolean) => {\n                      setHasValidationErrors(!validity);\n                    }}\n                  />\n\n                  <span\n                    className=\"flex flex-row text grey flex-center\"\n                    style={{\n                      width: 'fit-content',\n                      height: 'fit-content',\n                      wordBreak: 'keep-all',\n                      // padding: '1px',\n                    }}\n                  >\n                    <Tooltip message=\"The Target ID is the Arweave Transaction ID that will be resolved at the root of this ArNS name\" />\n                  </span>\n                </div>\n                <NameTokenSelector\n                  selectedTokenCallback={(id) => handleANTId(id)}\n                />\n              </div>\n            </Accordion>\n\n            <div className=\"text-white flex w-full items-center justify-end pb-4 border-b border-dark-grey whitespace-nowrap\">\n              {formatedPriceString}\n            </div>\n            <div style={{ marginTop: '0px' }}>\n              <WorkflowButtons\n                nextText=\"Next\"\n                backText=\"Back\"\n                onNext={validatingNext ? undefined : handleNext}\n                onBack={() => {\n                  // reset the state when going back to the home page\n                  dispatchRegisterState({\n                    type: 'reset',\n                  });\n                  navigate('/', { state: `/register/${domain}` });\n                }}\n                customBackStyle={{ fontSize: '.875rem', padding: '.625rem' }}\n                customNextStyle={{\n                  width: '100px',\n                  fontSize: '.875rem',\n                  padding: '.625rem',\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RegisterNameForm;\n"],"names":["useIsFocused","id","isFocused","setIsFocused","reactExports","element","onFocus","onBlur","NameTokenSelector","selectedTokenCallback","arweaveDataProvider","antAoClient","hyperbeamUrl","useGlobalState","walletAddress","useWalletState","searchText","setSearchText","tokens","setTokens","loading","setLoading","filteredTokens","setFilteredTokens","selectedToken","setSelectedToken","searching","setSearching","searchActive","setSearchActive","validImport","setValidImport","listRef","listPage","setListPage","listItemCount","ArweaveTransactionID","handleClickOutside","e","getTokenList","address","imports","fetchedprocessIds","validImports","contract","xu","Fn","info","error","eventEmitter","ids","processIds","associatedRecords","contracts","processId","names","acc","owner","controllers","ticker","name","contracts2","newTokens","result","details","handleTokenSearch","query","filteredResults","term","n","handleSetToken","customPreviousAndNextButtons","page","type","originalElement","jsxRuntimeExports","updatePage","ValidationInput","v","ARWEAVE_TX_LENGTH","_a","VALIDATION_INPUT_TYPES","validity","Loader","isArweaveTransactionID","SvgClose","Tooltip","token","index","SvgHamburgerOutline","name2","Pagination","RegisterNameForm","arioTicker","arioProcessId","antRegistryProcessId","domain","leaseDuration","registrationType","antID","targetId","dispatchRegisterState","useRegistrationState","costDetails","useCostDetails","fiatPrice","useArNSIntentPrice","formatedPriceString","formatARIOWithCommas","formatARIO","xw","dispatchTransactionState","useTransactionState","useParams","isValidatingRegistration","useRegistrationStatus","newTargetId","setNewTargetId","targetIdFocused","navigate","useNavigate","hasValidationErrors","setHasValidationErrors","validatingNext","setValidatingNext","antVersion","isRefetchingAntVersion","isLoadingAntVersion","refetchAntVersion","useLatestANTVersion","antModuleId","handleANTId","handleNext","ValidationError","buyRecordPayload","emojiRegex","encodeDomainToASCII","TRANSACTION_TYPES","ARNS_INTERACTION_TYPES","PageLoader","StepProgressBar","decodeDomainToASCII","CheckCircleFilled","Counter","MIN_LEASE_DURATION","MAX_LEASE_DURATION","formatDate","Accordion","WorkflowButtons"],"mappings":"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"}